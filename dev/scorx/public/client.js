// Generated by Haxe 4.0.0-preview.4+1e3e5e016
(function ($global) { "use strict";
var $hxEnums = {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() {
	var files = ["/assets/mp3/test/100.mp3","/assets/mp3/test/110.mp3","/assets/mp3/test/120.mp3","/assets/mp3/test/130.mp3","/assets/mp3/test/200.mp3"];
	audio_scorx_MixerModel.instance.loadFiles(files);
	m.mount(window.document.body,new Index());
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
var mithril_Mithril = function() { };
mithril_Mithril.__name__ = true;
var Index = function() {
};
Index.__name__ = true;
Index.__interfaces__ = [mithril_Mithril];
Index.prototype = {
	view: function() {
		if(arguments.length > 0 && arguments[0].tag != this) return arguments[0].tag.view.apply(arguments[0].tag, arguments);
		return [m.m("h1","Hello from Mithril"),new audio_scorx_ui_PlayerView().view()];
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var audio_Audio = function() {
	this.context = new AudioContext();
};
audio_Audio.__name__ = true;
var audio_IPlayback = function() { };
audio_IPlayback.__name__ = true;
var audio_scorx_Mixer = function(channels) {
	this.channels = [];
	this.channels = channels;
	this.trackVolumeNodes = [];
	this.sampleNodes = [];
	this.masterVolumeNode = audio_Audio.instance.context.createGain();
	this.analyserNode = audio_Audio.instance.context.createAnalyser();
};
audio_scorx_Mixer.__name__ = true;
audio_scorx_Mixer.__interfaces__ = [audio_IPlayback];
audio_scorx_Mixer.prototype = {
	play: function(startTime) {
		if(startTime == null) {
			startTime = 0;
		}
		this.buildGraph();
		this.elapsedTimeSinceStart = startTime;
		this.sampleNodes.map(function(s) {
			s.start(0,startTime);
			return;
		});
	}
	,stop: function() {
		this.sampleNodes.map(function(s) {
			s.stop(0);
			s = null;
			return s;
		});
	}
	,buildGraph: function() {
		var sources = [];
		haxe_Log.trace(this.channels.length,{ fileName : "src/audio/scorx/Mixer.hx", lineNumber : 47, className : "audio.scorx.Mixer", methodName : "buildGraph"});
		var _g1 = 0;
		var _g = this.channels.length;
		while(_g1 < _g) {
			var i = _g1++;
			var sample = this.channels[i].buffer;
			sources[i] = audio_Audio.instance.context.createBufferSource();
			sources[i].buffer = sample;
			this.trackVolumeNodes[i] = audio_Audio.instance.context.createGain();
			this.trackVolumeNodes[i].gain.value = this.channels[i].volume;
			sources[i].connect(this.trackVolumeNodes[i],0,0);
			this.trackVolumeNodes[i].connect(this.masterVolumeNode,0,0);
			this.masterVolumeNode.connect(this.analyserNode,0,0);
			this.analyserNode.connect(audio_Audio.instance.context.destination,0,0);
		}
		this.sampleNodes = sources;
	}
	,setVolumeOfChannel: function(idx,volume) {
		if(this.trackVolumeNodes == null || this.trackVolumeNodes == []) {
			return;
		}
		if(this.trackVolumeNodes[idx] == null) {
			return;
		}
		this.trackVolumeNodes[idx].gain.value = volume;
		this.channels[idx].volume = volume;
	}
};
var audio_scorx_Channel = function(name,buffer) {
	this.name = name;
	this.buffer = buffer;
	this.peaks = 0;
	this.volume = 1.0;
	this.panning = 0;
	this.sampleNode = null;
	this.volumeNode = null;
};
audio_scorx_Channel.__name__ = true;
var audio_scorx_Loader = function() { };
audio_scorx_Loader.__name__ = true;
audio_scorx_Loader.load = function(url) {
	return new Promise(function(res,rej) {
		var request = new XMLHttpRequest();
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.onload = function(_) {
			audio_Audio.instance.context.decodeAudioData(request.response,function(buffer) {
				haxe_Log.trace("Loaded and decoded track " + url,{ fileName : "src/audio/scorx/Mixer.hx", lineNumber : 118, className : "audio.scorx.Loader", methodName : "load"});
				if(buffer == null) {
					rej("error decoding file data: " + url);
				}
				res({ url : url, buffer : buffer});
			},function() {
				rej("decodeAudioData error ");
			});
		};
		request.send();
		return;
	});
};
var audio_scorx_MixerModel = function() {
	this.playing = false;
	this.volumes = [];
	this.files = [];
	this.deltaTime = 0;
};
audio_scorx_MixerModel.__name__ = true;
audio_scorx_MixerModel.__interfaces__ = [audio_IPlayback];
audio_scorx_MixerModel.prototype = {
	loadFiles: function(files) {
		var _gthis = this;
		this.mixer = null;
		this.files = files;
		this.volumes = this.files.map(function(f) {
			return 0.7;
		});
		m.redraw();
		Promise.all(files.map(function(f1) {
			return audio_scorx_Loader.load(f1);
		})).then(function(buffers) {
			return Promise.resolve(buffers.map(function(b) {
				return new audio_scorx_Channel(b.url,b.buffer);
			}));
		}).then(function(channels) {
			haxe_Log.trace("all channels loaded!",{ fileName : "src/audio/scorx/MixerModel.hx", lineNumber : 34, className : "audio.scorx.MixerModel", methodName : "loadFiles"});
			_gthis.mixer = new audio_scorx_Mixer(channels);
			m.redraw();
			return;
		});
	}
	,play: function(startTime) {
		if(startTime == null) {
			startTime = 0;
		}
		this.deltaTime = audio_Audio.instance.context.currentTime;
		haxe_Log.trace("Delta:" + this.deltaTime,{ fileName : "src/audio/scorx/MixerModel.hx", lineNumber : 42, className : "audio.scorx.MixerModel", methodName : "play"});
		if(this.mixer != null) {
			this.mixer.stop();
			this.mixer.play(startTime);
			this.playing = true;
		}
	}
	,stop: function() {
		if(this.mixer != null) {
			this.mixer.stop();
		}
		this.playing = false;
	}
	,setVolumeOfChannel: function(idx,volume) {
		this.volumes[idx] = volume;
		if(this.mixer != null) {
			this.mixer.setVolumeOfChannel(idx,volume);
		}
	}
};
var audio_scorx_ui_ChannelView = function(idx,filename) {
	this.filename = filename;
	this.idx = idx;
};
audio_scorx_ui_ChannelView.__name__ = true;
audio_scorx_ui_ChannelView.__interfaces__ = [mithril_Mithril];
audio_scorx_ui_ChannelView.prototype = {
	view: function() {
		var _gthis = this;
		if(arguments.length > 0 && arguments[0].tag != this) return arguments[0].tag.view.apply(arguments[0].tag, arguments);
		var m1 = audio_scorx_MixerModel.instance;
		return m.m("div.channelview",[m.m("span",this.idx + ":" + this.filename),m.m("input",{ type : "range", min : 0, max : 100, value : m1.volumes[this.idx] * 100, onchange : function(e) {
			haxe_Log.trace("change: ",{ fileName : "src/audio/scorx/ui/ChannelView.hx", lineNumber : 19, className : "audio.scorx.ui.ChannelView", methodName : "view", customParams : [e.target.value]});
			audio_scorx_MixerModel.instance.setVolumeOfChannel(_gthis.idx,e.target.value / 100);
			return;
		}})]);
	}
};
var audio_scorx_ui_PlayView = function() {
	haxe_Log.trace("new",{ fileName : "src/audio/scorx/ui/PlayView.hx", lineNumber : 8, className : "audio.scorx.ui.PlayView", methodName : "new"});
};
audio_scorx_ui_PlayView.__name__ = true;
audio_scorx_ui_PlayView.__interfaces__ = [mithril_Mithril];
audio_scorx_ui_PlayView.prototype = {
	buttonsView: function() {
		if(audio_scorx_MixerModel.instance.mixer != null) {
			return [m.m("button",{ onclick : function(e) {
				haxe_Log.trace("button clicked!",{ fileName : "src/audio/scorx/ui/PlayView.hx", lineNumber : 31, className : "audio.scorx.ui.PlayView", methodName : "buttonsView"});
				audio_scorx_MixerModel.instance.play();
				return;
			}},"Start"),m.m("button",{ onclick : function(e1) {
				haxe_Log.trace("button clicked!",{ fileName : "src/audio/scorx/ui/PlayView.hx", lineNumber : 35, className : "audio.scorx.ui.PlayView", methodName : "buttonsView"});
				audio_scorx_MixerModel.instance.stop();
				return;
			}},"Stop")];
		} else {
			return m.m("div","Mixer not ready...");
		}
	}
	,view: function() {
		if(arguments.length > 0 && arguments[0].tag != this) return arguments[0].tag.view.apply(arguments[0].tag, arguments);
		return [this.buttonsView()];
	}
};
var audio_scorx_ui_PlayerView = function() {
};
audio_scorx_ui_PlayerView.__name__ = true;
audio_scorx_ui_PlayerView.__interfaces__ = [mithril_Mithril];
audio_scorx_ui_PlayerView.prototype = {
	view: function() {
		if(arguments.length > 0 && arguments[0].tag != this) return arguments[0].tag.view.apply(arguments[0].tag, arguments);
		var files = audio_scorx_MixerModel.instance.files;
		return [new audio_scorx_ui_PlayView().view(),files.map(function(f) {
			return new audio_scorx_ui_ChannelView(files.indexOf(f),f).view();
		})];
	}
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g11 = 0;
			var _g3 = l;
			while(_g11 < _g3) {
				var i1 = _g11++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if((arg1 instanceof js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(offset == null) {
		offset = 0;
	}
	if((arg.buffer instanceof js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
try {
var __varName = window.m;
(function(m) {
			if (m.m) return;
			m.m = function() {
				try { 
					for(var i=0; i < arguments.length; ++i) if(arguments[i] instanceof List) {
						var list = arguments[i].h; arguments[i] = [];
						while(list != null) { arguments[i].push(l[0]); list = l[1]; }
					}
				} catch(e) {}
				return m.apply(this, arguments);
			}
		})(__varName);
} catch(_) {}
try {
GLOBAL.m = require("mithril");
var __varName1 = GLOBAL.m;
(function(m) {
			if (m.m) return;
			m.m = function() {
				try { 
					for(var i=0; i < arguments.length; ++i) if(arguments[i] instanceof List) {
						var list = arguments[i].h; arguments[i] = [];
						while(list != null) { arguments[i].push(l[0]); list = l[1]; }
					}
				} catch(e) {}
				return m.apply(this, arguments);
			}
		})(__varName1);
} catch(_) {}
audio_Audio.instance = new audio_Audio();
audio_scorx_MixerModel.instance = new audio_scorx_MixerModel();
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
