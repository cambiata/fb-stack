// Generated by Haxe 4.0.0-preview.4+1e3e5e016
(function ($global) { "use strict";
var $hxEnums = {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var App = function() {
	this.timeout = null;
	this.allowedHzDifference = 5;
	this.nPitchValues = 5;
	this.pitchHistory = [];
	this.minUpdateDelay = 75;
	this.pitch = new audio_pitch_PitchB();
	this.isPlaying = false;
	this.playbackAudioBuffer = null;
	this.animation = new audio_AnimationTimer(50);
	this.animation.addCallback($bind(this,this.eachFrame));
	this.loadSoundFile("/sounds/whistling3.ogg");
};
App.__name__ = true;
App.prototype = {
	loadSoundFile: function(url) {
		var _gthis = this;
		audio_AudioBufferLoader.load(url).then(function(bufferAndUrl) {
			console.log("src/App.hx:33:","loaded");
			_gthis.playbackAudioBuffer = bufferAndUrl.buffer;
			_gthis.togglePlayback();
			return;
		})["catch"](function(err) {
			console.log("src/App.hx:38:",err);
			return;
		});
	}
	,stopAnyting: function() {
		if(this.playbackSourceNode != null) {
			this.playbackSourceNode.stop(0);
			this.playbackSourceNode = null;
		}
		if(this.oscillatorSourceNode != null) {
			this.oscillatorSourceNode.stop(0);
			this.oscillatorSourceNode = null;
		}
		this.isPlaying = false;
		this.animation.stop();
	}
	,togglePlayback: function() {
		var _gthis = this;
		var startPlayback = function() {
			_gthis.playbackSourceNode = audio_Audio.instance.context.createBufferSource();
			_gthis.playbackSourceNode.buffer = _gthis.playbackAudioBuffer;
			_gthis.playbackSourceNode.loop = true;
			_gthis.pitch.setupAnalyserNode(_gthis.playbackSourceNode).connect(audio_Audio.instance.context.destination);
			_gthis.playbackSourceNode.start(0);
			_gthis.isPlaying = true;
			_gthis.animation.start();
		};
		if(this.isPlaying) {
			this.stopAnyting();
		} else {
			startPlayback();
		}
	}
	,toggleOscillator: function() {
		var _gthis = this;
		var startOscillator = function() {
			_gthis.oscillatorSourceNode = audio_Audio.instance.context.createOscillator();
			_gthis.pitch.setupAnalyserNode(_gthis.oscillatorSourceNode).connect(audio_Audio.instance.context.destination);
			_gthis.oscillatorSourceNode.start(0);
			_gthis.isPlaying = true;
			_gthis.animation.start();
		};
		if(this.isPlaying) {
			this.stopAnyting();
		} else {
			startOscillator();
		}
	}
	,toggleLiveInput: function() {
		var _gthis = this;
		var startLiveInput = function() {
			var gotStreamA = function(stream) {
				var mediaStreamSource = audio_Audio.instance.context.createMediaStreamSource(stream);
				_gthis.pitch.setupAnalyserNode(mediaStreamSource);
				_gthis.animation.start();
				return null;
			};
			_gthis.getUserMedia({ "audio" : { "mandatory" : { "googEchoCancellation" : "false", "googAutoGainControl" : "false", "googNoiseSuppression" : "false", "googHighpassFilter" : "false"}, "optional" : []}},gotStreamA);
		};
		if(this.isPlaying) {
			this.stopAnyting();
		} else {
			startLiveInput();
		}
	}
	,getUserMedia: function(dictionary,callback) {
		var promise = navigator.mediaDevices.getUserMedia(dictionary);
		promise.then(function(stream) {
			return callback(stream);
		})["catch"](function(e) {
			console.log("src/App.hx:124:",e.name + " " + e.message);
			return;
		});
	}
	,eachFrame: function() {
		var hz = this.pitch.getHerz();
		var smoothHz = audio_pitch_PitchSmoother.instance.getSmoothHz(hz);
		var tmp = Math.round(hz) + " ";
		var tmp1 = Math.round(smoothHz);
		window.document.getElementById("pitch").innerText = tmp + tmp1;
		console.log("src/App.hx:145:",Math.round(hz) + " " + Math.round(smoothHz));
	}
};
var mithril_Mithril = function() { };
mithril_Mithril.__name__ = true;
var Main = function() {
	this.app = new App();
};
Main.__name__ = true;
Main.__interfaces__ = [mithril_Mithril];
Main.main = function() {
	m.mount(window.document.querySelector("main"),new Main());
};
Main.prototype = {
	view: function() {
		var _gthis = this;
		if(arguments.length > 0 && arguments[0].tag != this) return arguments[0].tag.view.apply(arguments[0].tag, arguments);
		return [m.m("h1","Hello from Mithril"),m.m("button",{ onclick : function(e) {
			console.log("src/Main.hx:22:","button1 clicked!");
			_gthis.app.togglePlayback();
			return;
		}},"Btn1"),m.m("button",{ onclick : function(e1) {
			console.log("src/Main.hx:26:","button2 clicked!");
			_gthis.app.toggleLiveInput();
			return;
		}},"Btn2"),m.m("button",{ onclick : function(e2) {
			console.log("src/Main.hx:30:","button3 clicked!");
			_gthis.app.toggleOscillator();
			return;
		}},"Btn13")];
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var audio_IAnimationHandler = function() { };
audio_IAnimationHandler.__name__ = true;
var audio_AnimationFrame = function() {
	this.frameID = null;
	this.callbacks = [];
};
audio_AnimationFrame.__name__ = true;
audio_AnimationFrame.__interfaces__ = [audio_IAnimationHandler];
audio_AnimationFrame.prototype = {
	addCallback: function(cb) {
		this.callbacks.push(cb);
	}
	,clearCallbacks: function() {
		this.callbacks = [];
	}
	,start: function() {
		this.onFrame();
	}
	,stop: function() {
		window.cancelAnimationFrame(this.frameID);
	}
	,onFrame: function(time) {
		this.callbacks.map(function(cb) {
			cb();
			return;
		});
		this.frameID = window.requestAnimationFrame($bind(this,this.onFrame));
	}
};
var audio_AnimationTimer = function(delayMs) {
	if(delayMs == null) {
		delayMs = 100;
	}
	this.timeout = null;
	this.callbacks = [];
	this.delayMs = delayMs;
};
audio_AnimationTimer.__name__ = true;
audio_AnimationTimer.__interfaces__ = [audio_IAnimationHandler];
audio_AnimationTimer.prototype = {
	addCallback: function(cb) {
		this.callbacks.push(cb);
	}
	,clearCallbacks: function() {
		this.callbacks = [];
	}
	,start: function() {
		this.onFrame();
	}
	,stop: function() {
		if(this.timeout != null) {
			window.clearTimeout(this.timeout);
		}
		this.timeout = null;
	}
	,onFrame: function(time) {
		var _gthis = this;
		this.callbacks.map(function(cb) {
			cb();
			return;
		});
		this.timeout = window.setTimeout(function() {
			_gthis.onFrame();
		},this.delayMs);
	}
};
var audio_Audio = function() {
	this.context = new AudioContext();
};
audio_Audio.__name__ = true;
var audio_IPlayback = function() { };
audio_IPlayback.__name__ = true;
var audio_AudioBufferLoader = function() { };
audio_AudioBufferLoader.__name__ = true;
audio_AudioBufferLoader.load = function(url) {
	return new Promise(function(res,rej) {
		console.log("src/audio/AudioBufferLoader.hx:18:","load " + url);
		var request = new XMLHttpRequest();
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.onload = function(_) {
			audio_Audio.instance.context.decodeAudioData(request.response,function(buffer) {
				console.log("src/audio/AudioBufferLoader.hx:26:","Loaded and decoded track " + url);
				if(buffer == null) {
					rej("error decoding file data: " + url);
				}
				res({ url : url, buffer : buffer});
			},function() {
				rej("decodeAudioData error ");
			});
		};
		request.send();
		return;
	});
};
var audio_pitch_IPitchDetector = function() { };
audio_pitch_IPitchDetector.__name__ = true;
var audio_pitch_PitchB = function(useFilters) {
	if(useFilters == null) {
		useFilters = true;
	}
	this.volumeCheck = false;
	this.maxVolume = 128;
	this.fftSize = 2048;
	this.analyserNode = null;
	this.volumeThreshold = 134;
	this.useFilters = useFilters;
	this.sampleRate = audio_Audio.instance.context.sampleRate;
	this.inputBuffer = new Uint8Array(this.fftSize);
};
audio_pitch_PitchB.__name__ = true;
audio_pitch_PitchB.__interfaces__ = [audio_pitch_IPitchDetector];
audio_pitch_PitchB.prototype = {
	setupAnalyserNode: function(source) {
		var audioContext = audio_Audio.instance.context;
		this.analyserNode = audioContext.createAnalyser();
		this.analyserNode.fftSize = this.fftSize;
		if(this.useFilters) {
			this.analyserNode.smoothingTimeConstant = 0.8;
			var gainNode = audioContext.createGain();
			gainNode.gain.value = 1.5;
			var lowPassFilter1 = audioContext.createBiquadFilter();
			var lowPassFilter2 = audioContext.createBiquadFilter();
			var highPassFilter1 = audioContext.createBiquadFilter();
			var highPassFilter2 = audioContext.createBiquadFilter();
			lowPassFilter1.Q.value = 0;
			lowPassFilter1.frequency.value = 4200;
			lowPassFilter1.type = "lowpass";
			lowPassFilter2.Q.value = 0;
			lowPassFilter2.frequency.value = 4200;
			lowPassFilter2.type = "lowpass";
			highPassFilter1.Q.value = 0;
			highPassFilter1.frequency.value = 30;
			highPassFilter1.type = "highpass";
			highPassFilter2.Q.value = 0;
			highPassFilter2.frequency.value = 30;
			highPassFilter2.type = "highpass";
			source.connect(lowPassFilter1);
			lowPassFilter1.connect(lowPassFilter2);
			lowPassFilter2.connect(highPassFilter1);
			highPassFilter1.connect(highPassFilter2);
			highPassFilter2.connect(gainNode);
			gainNode.connect(this.analyserNode);
		} else {
			source.connect(this.analyserNode);
		}
		return this.analyserNode;
	}
	,getHerz: function() {
		if(this.analyserNode == null) {
			return -2;
		}
		return this.analyse();
	}
	,analyse: function() {
		this.analyserNode.getByteTimeDomainData(this.inputBuffer);
		var _g1 = 0;
		var _g = this.inputBuffer.length;
		while(_g1 < _g) ++_g1;
		var bufLenDiv4 = this.inputBuffer.length / 4 | 0;
		var _g11 = 0;
		while(_g11 < bufLenDiv4) {
			var i = _g11++;
			if(this.maxVolume < this.inputBuffer[i]) {
				this.maxVolume = this.inputBuffer[i];
			}
			if(!this.volumeCheck && this.inputBuffer[i] > this.volumeThreshold) {
				this.volumeCheck = true;
			}
		}
		if(this.volumeCheck) {
			return this.Yin_pitchEstimation(this.inputBuffer,this.sampleRate);
		}
		return -1;
	}
	,Yin_pitchEstimation: function(inputBuffer,sampleRate) {
		
        var yinThreshold = 0.15; // allowed uncertainty (e.g 0.05 will return a pitch with ~95% probability)
        var yinProbability = 0.0; // READONLY: contains the certainty of the note found as a decimal (i.e 0.3 is 30%)

        var yinBuffer = new Float32Array(Math.floor(inputBuffer.length/2));
        yinBuffer[0] = 1;
        var runningSum = 0;
        var pitchInHz = 0.0;
        var foundTau = false;
        var minTauValue;
        var minTau = 0;

        for (var tau=1; tau<Math.floor(inputBuffer.length/2); tau++) {
            // Step 1: Calculates the squared difference of the signal with a shifted version of itself.
            yinBuffer[tau] = 0;
            for (var i=0; i<Math.floor(inputBuffer.length/2); i++) {
                yinBuffer[tau] += Math.pow(((inputBuffer[i]-128)/128)-((inputBuffer[i+tau]-128)/128),2);
            }
            // Step 2: Calculate the cumulative mean on the normalised difference calculated in step 1.
            runningSum += yinBuffer[tau];
            yinBuffer[tau] = yinBuffer[tau]*(tau/runningSum);

            // Step 3: Check if the current normalised cumulative mean is over the threshold.
            if (tau > 1) {
                if (foundTau) {
                    if (yinBuffer[tau] < minTauValue) {
                        minTauValue = yinBuffer[tau];
                        minTau = tau;
                    }
                    else break;
                }
                else if (yinBuffer[tau] < yinThreshold) {
                    foundTau = true;
                    minTau = tau;
                    minTauValue = yinBuffer[tau];
                }
            }
        }

        if (minTau == 0) {
            yinProbability = 0;
            pitchInHz = 0.0;
        } else {
            // Step 4: Interpolate the shift value (tau) to improve the pitch estimate.
            minTau += (yinBuffer[minTau+1]-yinBuffer[minTau-1])/(2*((2*yinBuffer[minTau])-yinBuffer[minTau-1]-yinBuffer[minTau+1]));
            pitchInHz = sampleRate/minTau;
            yinProbability = 1-minTauValue;
        }

        return pitchInHz;
        ;
		return 0;
	}
};
var audio_pitch_PitchSmoother = function() {
	this.timeout = null;
	this.pitchHistory = [];
	this.nPitchValues = 5;
	this.allowedHzDifference = 5;
};
audio_pitch_PitchSmoother.__name__ = true;
audio_pitch_PitchSmoother.prototype = {
	getSmoothHz: function(hz) {
		var _gthis = this;
		if(hz > 0) {
			if(this.pitchHistory.length >= this.nPitchValues) {
				this.pitchHistory.shift();
			}
			if(this.pitchHistory.length > 0 && Math.abs(hz / 2.0 - this.pitchHistory[this.pitchHistory.length - 1]) < this.allowedHzDifference) {
				hz /= 2.0;
			}
			var roundHz = Math.round(hz * 10) / 10;
			this.pitchHistory.push(roundHz);
			var sortedPitchHistory = this.pitchHistory.slice();
			sortedPitchHistory.sort(function(a,b) {
				return a - b | 0;
			});
			return sortedPitchHistory[Math.floor((sortedPitchHistory.length - 1) / 2)];
		} else if(this.pitchHistory.length > 0 && this.timeout == null) {
			this.timeout = window.setTimeout(function() {
				console.log("src/audio/pitch/PitchSmoother.hx:37:","clear pitchHistory");
				_gthis.pitchHistory = [];
				_gthis.timeout = null;
			},200);
		}
		return hz;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g11 = 0;
			var _g3 = l;
			while(_g11 < _g3) {
				var i1 = _g11++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		while(_g1 < len) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if((arg1 instanceof js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(offset == null) {
		offset = 0;
	}
	if((arg.buffer instanceof js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
try {
var __varName = window.m;
(function(m) {
			if (m.m) return;
			m.m = function() {
				try { 
					for(var i=0; i < arguments.length; ++i) if(arguments[i] instanceof List) {
						var list = arguments[i].h; arguments[i] = [];
						while(list != null) { arguments[i].push(l[0]); list = l[1]; }
					}
				} catch(e) {}
				return m.apply(this, arguments);
			}
		})(__varName);
} catch(_) {}
try {
GLOBAL.m = require("mithril");
var __varName1 = GLOBAL.m;
(function(m) {
			if (m.m) return;
			m.m = function() {
				try { 
					for(var i=0; i < arguments.length; ++i) if(arguments[i] instanceof List) {
						var list = arguments[i].h; arguments[i] = [];
						while(list != null) { arguments[i].push(l[0]); list = l[1]; }
					}
				} catch(e) {}
				return m.apply(this, arguments);
			}
		})(__varName1);
} catch(_) {}
audio_AnimationFrame.instance = new audio_AnimationFrame();
audio_AnimationTimer.instance = new audio_AnimationTimer();
audio_Audio.instance = new audio_Audio();
audio_pitch_PitchSmoother.instance = new audio_pitch_PitchSmoother();
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
